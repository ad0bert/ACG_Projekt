#version 330 core

in vec4 clipSpace;
in vec2 textureCoords;
in vec3 toCameraVector;
in vec3 fromLightVector;

out vec4 out_Color;

uniform sampler2D reflectionTexture;
uniform sampler2D refractionTexture;
uniform sampler2D dudvMap;
uniform sampler2D normalMap;
uniform sampler2D depthMap;
uniform vec3 lightColour;

uniform float moveFactor;

const float waveStrenght = 0.04;
const float shineDamper = 20.0;
const float reflectivity = 0.5;

void main(void) {

	vec2 ndc = (clipSpace.xy/clipSpace.w)/ 2.0 + 0.5;
	vec2 refractionTexCoords = vec2(ndc.x, ndc.y);
	vec2 reflectionTexCoords = vec2(ndc.x, -ndc.y);
	
	float near = 0.1;
	float far = 1000.0; // todo load as uniform values
	
	float depth = texture(depthMap, refractionTexCoords).r;
	float floorDistance = 2.0 * near * far / (far + near - (2.0 * depth - 1.0) * (far - near));
	
	depth = gl_FragCoord.z;
	float waterDistance = 2.0 * near * far / (far + near - (2.0 * depth - 1.0) * (far - near));
	float waterDepth = floorDistance - waterDistance;
	
	vec2 distortionTexCoords = texture(dudvMap, vec2(textureCoords.x + moveFactor, textureCoords.y)).rg*0.1;
	distortionTexCoords = textureCoords + vec2(distortionTexCoords.x, distortionTexCoords.y + moveFactor);
	vec2 totalDistorion = (texture(dudvMap, distortionTexCoords).rg * 2.0 - 1.0) * waveStrenght * clamp(waterDepth / 20.0, 0.0, 1.0);;
	
	//vec2 distortion1 = (texture(dudvMap, vec2(textureCoords.x + moveFactor, textureCoords.y)).rg * 2.0 - 1.0) * waveStrenght;
	//vec2 distortion2 = (texture(dudvMap, vec2(-textureCoords.x + moveFactor, textureCoords.y + moveFactor)).rg * 2.0 - 1.0) * waveStrenght;
	//vec2 totalDistorion = distortion1 + distortion2;
	
	reflectionTexCoords += totalDistorion;
	reflectionTexCoords.x = clamp(reflectionTexCoords.x, 0.001, 0.999);
	reflectionTexCoords.y = clamp(reflectionTexCoords.y, -0.999, -0.001);
	
	refractionTexCoords += totalDistorion;
	refractionTexCoords = clamp(refractionTexCoords, 0.001, 0.999);
	
	vec4 reflectionColour = texture(reflectionTexture, reflectionTexCoords);
	vec4 refractionColour = texture(refractionTexture, refractionTexCoords);
	
	vec4 normalMapColour = texture (normalMap, distortionTexCoords);
	vec3 normal = vec3(normalMapColour.r * 2.0 -1.0, normalMapColour.b * 3.0, normalMapColour.g * 2.0 -1.0);
	normal = normalize(normal);
	
	vec3 viewVector = normalize(toCameraVector);
	float refractiveFactor = dot(viewVector, vec3(0.0,1.0,0.0));
	refractiveFactor = pow(refractiveFactor, 0.2);
	
	vec3 reflectedLight = reflect(normalize(fromLightVector), normal);
	float specular = max(dot(reflectedLight, viewVector), 0.0);
	specular = pow(specular, shineDamper);
	vec3 specularHighlights = lightColour * specular * reflectivity * clamp(waterDepth / 5.0, 0.0, 1.0);
	
	out_Color = mix(reflectionColour, refractionColour, refractiveFactor);
	out_Color = mix(out_Color, vec4(0.0, 0.3,0.5,1.0), 0.2) + vec4(specularHighlights, 0.0);
	out_Color.a = clamp(waterDepth / 5.0, 0.0, 1.0);
}